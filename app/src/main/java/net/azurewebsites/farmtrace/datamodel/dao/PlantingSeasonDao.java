package net.azurewebsites.farmtrace.datamodel.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.azurewebsites.farmtrace.datamodel.dao.PlantingSeason;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PLANTING_SEASON.
*/
public class PlantingSeasonDao extends AbstractDao<PlantingSeason, Long> {

    public static final String TABLENAME = "PLANTING_SEASON";

    /**
     * Properties of entity PlantingSeason.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PlantingSeasonID = new Property(0, Long.class, "plantingSeasonID", true, "PLANTING_SEASON_ID");
        public final static Property HarvestedQuantity = new Property(1, Integer.class, "harvestedQuantity", false, "HARVESTED_QUANTITY");
        public final static Property SeasonName = new Property(2, String.class, "seasonName", false, "SEASON_NAME");
        public final static Property StartDate = new Property(3, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property TargetDate = new Property(4, java.util.Date.class, "targetDate", false, "TARGET_DATE");
        public final static Property TargetQuantity = new Property(5, Integer.class, "targetQuantity", false, "TARGET_QUANTITY");
        public final static Property CropID = new Property(6, Long.class, "cropID", false, "CROP_ID");
    };

    private Query<PlantingSeason> crop_PlantingSeasonListQuery;

    public PlantingSeasonDao(DaoConfig config) {
        super(config);
    }
    
    public PlantingSeasonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PLANTING_SEASON' (" + //
                "'PLANTING_SEASON_ID' INTEGER PRIMARY KEY ," + // 0: plantingSeasonID
                "'HARVESTED_QUANTITY' INTEGER," + // 1: harvestedQuantity
                "'SEASON_NAME' TEXT," + // 2: seasonName
                "'START_DATE' INTEGER," + // 3: startDate
                "'TARGET_DATE' INTEGER," + // 4: targetDate
                "'TARGET_QUANTITY' INTEGER," + // 5: targetQuantity
                "'CROP_ID' INTEGER);"); // 6: cropID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PLANTING_SEASON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlantingSeason entity) {
        stmt.clearBindings();
 
        Long plantingSeasonID = entity.getPlantingSeasonID();
        if (plantingSeasonID != null) {
            stmt.bindLong(1, plantingSeasonID);
        }
 
        Integer harvestedQuantity = entity.getHarvestedQuantity();
        if (harvestedQuantity != null) {
            stmt.bindLong(2, harvestedQuantity);
        }
 
        String seasonName = entity.getSeasonName();
        if (seasonName != null) {
            stmt.bindString(3, seasonName);
        }
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(4, startDate.getTime());
        }
 
        java.util.Date targetDate = entity.getTargetDate();
        if (targetDate != null) {
            stmt.bindLong(5, targetDate.getTime());
        }
 
        Integer targetQuantity = entity.getTargetQuantity();
        if (targetQuantity != null) {
            stmt.bindLong(6, targetQuantity);
        }
 
        Long cropID = entity.getCropID();
        if (cropID != null) {
            stmt.bindLong(7, cropID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PlantingSeason readEntity(Cursor cursor, int offset) {
        PlantingSeason entity = new PlantingSeason( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // plantingSeasonID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // harvestedQuantity
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // seasonName
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // startDate
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // targetDate
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // targetQuantity
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // cropID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlantingSeason entity, int offset) {
        entity.setPlantingSeasonID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHarvestedQuantity(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSeasonName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setTargetDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setTargetQuantity(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCropID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PlantingSeason entity, long rowId) {
        entity.setPlantingSeasonID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PlantingSeason entity) {
        if(entity != null) {
            return entity.getPlantingSeasonID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "plantingSeasonList" to-many relationship of Crop. */
    public List<PlantingSeason> _queryCrop_PlantingSeasonList(Long cropID) {
        synchronized (this) {
            if (crop_PlantingSeasonListQuery == null) {
                QueryBuilder<PlantingSeason> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CropID.eq(null));
                crop_PlantingSeasonListQuery = queryBuilder.build();
            }
        }
        Query<PlantingSeason> query = crop_PlantingSeasonListQuery.forCurrentThread();
        query.setParameter(0, cropID);
        return query.list();
    }

}

package net.azurewebsites.farmtrace.datamodel.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.azurewebsites.farmtrace.datamodel.dao.Farmer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FARMER.
*/
public class FarmerDao extends AbstractDao<Farmer, Long> {

    public static final String TABLENAME = "FARMER";

    /**
     * Properties of entity Farmer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FarmerID = new Property(0, Long.class, "farmerID", true, "FARMER_ID");
        public final static Property GroupName = new Property(1, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Names = new Property(2, String.class, "names", false, "NAMES");
        public final static Property Telephone = new Property(3, String.class, "telephone", false, "TELEPHONE");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property FarmerGroupID = new Property(5, Long.class, "farmerGroupID", false, "FARMER_GROUP_ID");
    };

    private DaoSession daoSession;

    private Query<Farmer> farmerGroup_FarmerListQuery;

    public FarmerDao(DaoConfig config) {
        super(config);
    }
    
    public FarmerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FARMER' (" + //
                "'FARMER_ID' INTEGER PRIMARY KEY ," + // 0: farmerID
                "'GROUP_NAME' TEXT," + // 1: groupName
                "'NAMES' TEXT," + // 2: names
                "'TELEPHONE' TEXT," + // 3: telephone
                "'ADDRESS' TEXT," + // 4: address
                "'FARMER_GROUP_ID' INTEGER);"); // 5: farmerGroupID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FARMER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Farmer entity) {
        stmt.clearBindings();
 
        Long farmerID = entity.getFarmerID();
        if (farmerID != null) {
            stmt.bindLong(1, farmerID);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(2, groupName);
        }
 
        String names = entity.getNames();
        if (names != null) {
            stmt.bindString(3, names);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(4, telephone);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        Long farmerGroupID = entity.getFarmerGroupID();
        if (farmerGroupID != null) {
            stmt.bindLong(6, farmerGroupID);
        }
    }

    @Override
    protected void attachEntity(Farmer entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Farmer readEntity(Cursor cursor, int offset) {
        Farmer entity = new Farmer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // farmerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // names
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // telephone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // farmerGroupID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Farmer entity, int offset) {
        entity.setFarmerID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNames(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTelephone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFarmerGroupID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Farmer entity, long rowId) {
        entity.setFarmerID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Farmer entity) {
        if(entity != null) {
            return entity.getFarmerID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "farmerList" to-many relationship of FarmerGroup. */
    public List<Farmer> _queryFarmerGroup_FarmerList(Long farmerGroupID) {
        synchronized (this) {
            if (farmerGroup_FarmerListQuery == null) {
                QueryBuilder<Farmer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FarmerGroupID.eq(null));
                farmerGroup_FarmerListQuery = queryBuilder.build();
            }
        }
        Query<Farmer> query = farmerGroup_FarmerListQuery.forCurrentThread();
        query.setParameter(0, farmerGroupID);
        return query.list();
    }

}

package net.azurewebsites.farmtrace.datamodel.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.azurewebsites.farmtrace.datamodel.dao.FarmerGroup;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table FARMER_GROUP.
 */
public class FarmerGroupDao extends AbstractDao<FarmerGroup, Long> {

    public static final String TABLENAME = "FARMER_GROUP";

    /**
     * Properties of entity FarmerGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FarmerGroupID = new Property(0, Long.class, "farmerGroupID", true, "FARMER_GROUP_ID");
        public final static Property GroupName = new Property(1, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Telephone = new Property(2, String.class, "telephone", false, "TELEPHONE");
        public final static Property EmailAddress = new Property(3, String.class, "emailAddress", false, "EMAIL_ADDRESS");
        public final static Property ContactPerson = new Property(4, String.class, "contactPerson", false, "CONTACT_PERSON");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property CropID = new Property(6, Long.class, "cropID", false, "CROP_ID");
    }

    ;

    private DaoSession daoSession;

    private Query<FarmerGroup> crop_FarmerGroupListQuery;

    public FarmerGroupDao(DaoConfig config) {
        super(config);
    }

    public FarmerGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'FARMER_GROUP' (" + //
                "'FARMER_GROUP_ID' INTEGER PRIMARY KEY ," + // 0: farmerGroupID
                "'GROUP_NAME' TEXT," + // 1: groupName
                "'TELEPHONE' TEXT," + // 2: telephone
                "'EMAIL_ADDRESS' TEXT," + // 3: emailAddress
                "'CONTACT_PERSON' TEXT," + // 4: contactPerson
                "'ADDRESS' TEXT," + // 5: address
                "'CROP_ID' INTEGER);"); // 6: cropID
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FARMER_GROUP'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, FarmerGroup entity) {
        stmt.clearBindings();

        Long farmerGroupID = entity.getFarmerGroupID();
        if (farmerGroupID != null) {
            stmt.bindLong(1, farmerGroupID);
        }

        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(2, groupName);
        }

        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(3, telephone);
        }

        String emailAddress = entity.getEmailAddress();
        if (emailAddress != null) {
            stmt.bindString(4, emailAddress);
        }

        String contactPerson = entity.getContactPerson();
        if (contactPerson != null) {
            stmt.bindString(5, contactPerson);
        }

        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }

        Long cropID = entity.getCropID();
        if (cropID != null) {
            stmt.bindLong(7, cropID);
        }
    }

    @Override
    protected void attachEntity(FarmerGroup entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public FarmerGroup readEntity(Cursor cursor, int offset) {
        FarmerGroup entity = new FarmerGroup( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // farmerGroupID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // telephone
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // emailAddress
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contactPerson
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // cropID
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, FarmerGroup entity, int offset) {
        entity.setFarmerGroupID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTelephone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmailAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContactPerson(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCropID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(FarmerGroup entity, long rowId) {
        entity.setFarmerGroupID(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(FarmerGroup entity) {
        if (entity != null) {
            return entity.getFarmerGroupID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "farmerGroupList" to-many relationship of Crop.
     */
    public List<FarmerGroup> _queryCrop_FarmerGroupList(Long cropID) {
        synchronized (this) {
            if (crop_FarmerGroupListQuery == null) {
                QueryBuilder<FarmerGroup> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CropID.eq(null));
                crop_FarmerGroupListQuery = queryBuilder.build();
            }
        }
        Query<FarmerGroup> query = crop_FarmerGroupListQuery.forCurrentThread();
        query.setParameter(0, cropID);
        return query.list();
    }

}

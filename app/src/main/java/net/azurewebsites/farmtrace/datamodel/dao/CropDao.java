package net.azurewebsites.farmtrace.datamodel.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.azurewebsites.farmtrace.datamodel.dao.Crop;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CROP.
*/
public class CropDao extends AbstractDao<Crop, Long> {

    public static final String TABLENAME = "CROP";

    /**
     * Properties of entity Crop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CropID = new Property(0, Long.class, "cropID", true, "CROP_ID");
        public final static Property CropName = new Property(1, String.class, "cropName", false, "CROP_NAME");
        public final static Property CropVariety = new Property(2, String.class, "cropVariety", false, "CROP_VARIETY");
    };

    private DaoSession daoSession;


    public CropDao(DaoConfig config) {
        super(config);
    }
    
    public CropDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CROP' (" + //
                "'CROP_ID' INTEGER PRIMARY KEY ," + // 0: cropID
                "'CROP_NAME' TEXT," + // 1: cropName
                "'CROP_VARIETY' TEXT);"); // 2: cropVariety
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CROP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Crop entity) {
        stmt.clearBindings();
 
        Long cropID = entity.getCropID();
        if (cropID != null) {
            stmt.bindLong(1, cropID);
        }
 
        String cropName = entity.getCropName();
        if (cropName != null) {
            stmt.bindString(2, cropName);
        }
 
        String cropVariety = entity.getCropVariety();
        if (cropVariety != null) {
            stmt.bindString(3, cropVariety);
        }
    }

    @Override
    protected void attachEntity(Crop entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Crop readEntity(Cursor cursor, int offset) {
        Crop entity = new Crop( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cropID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cropName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // cropVariety
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Crop entity, int offset) {
        entity.setCropID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCropName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCropVariety(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Crop entity, long rowId) {
        entity.setCropID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Crop entity) {
        if(entity != null) {
            return entity.getCropID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package net.azurewebsites.farmtrace.datamodel.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.azurewebsites.farmtrace.datamodel.dao.Seed;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table SEED.
 */
public class SeedDao extends AbstractDao<Seed, Long> {

    public static final String TABLENAME = "SEED";

    /**
     * Properties of entity Seed.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SeedID = new Property(0, Long.class, "seedID", true, "SEED_ID");
        public final static Property SeedRate = new Property(1, Integer.class, "seedRate", false, "SEED_RATE");
        public final static Property SeedVariety = new Property(2, String.class, "seedVariety", false, "SEED_VARIETY");
        public final static Property TransplantToHarvest = new Property(3, Integer.class, "transplantToHarvest", false, "TRANSPLANT_TO_HARVEST");
        public final static Property CropID = new Property(4, Long.class, "cropID", false, "CROP_ID");
    }

    ;

    private Query<Seed> crop_SeedListQuery;

    public SeedDao(DaoConfig config) {
        super(config);
    }

    public SeedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'SEED' (" + //
                "'SEED_ID' INTEGER PRIMARY KEY ," + // 0: seedID
                "'SEED_RATE' INTEGER," + // 1: seedRate
                "'SEED_VARIETY' TEXT," + // 2: seedVariety
                "'TRANSPLANT_TO_HARVEST' INTEGER," + // 3: transplantToHarvest
                "'CROP_ID' INTEGER);"); // 4: cropID
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SEED'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Seed entity) {
        stmt.clearBindings();

        Long seedID = entity.getSeedID();
        if (seedID != null) {
            stmt.bindLong(1, seedID);
        }

        Integer seedRate = entity.getSeedRate();
        if (seedRate != null) {
            stmt.bindLong(2, seedRate);
        }

        String seedVariety = entity.getSeedVariety();
        if (seedVariety != null) {
            stmt.bindString(3, seedVariety);
        }

        Integer transplantToHarvest = entity.getTransplantToHarvest();
        if (transplantToHarvest != null) {
            stmt.bindLong(4, transplantToHarvest);
        }

        Long cropID = entity.getCropID();
        if (cropID != null) {
            stmt.bindLong(5, cropID);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Seed readEntity(Cursor cursor, int offset) {
        Seed entity = new Seed( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // seedID
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // seedRate
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // seedVariety
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // transplantToHarvest
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // cropID
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Seed entity, int offset) {
        entity.setSeedID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSeedRate(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSeedVariety(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTransplantToHarvest(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCropID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Seed entity, long rowId) {
        entity.setSeedID(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Seed entity) {
        if (entity != null) {
            return entity.getSeedID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "seedList" to-many relationship of Crop.
     */
    public List<Seed> _queryCrop_SeedList(Long cropID) {
        synchronized (this) {
            if (crop_SeedListQuery == null) {
                QueryBuilder<Seed> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CropID.eq(null));
                crop_SeedListQuery = queryBuilder.build();
            }
        }
        Query<Seed> query = crop_SeedListQuery.forCurrentThread();
        query.setParameter(0, cropID);
        return query.list();
    }

}

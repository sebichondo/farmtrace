package net.azurewebsites.farmtrace.datamodel.dao;

import java.util.List;

import net.azurewebsites.farmtrace.datamodel.dao.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table FARMER_GROUP.
 */
public class FarmerGroup {

    private Long farmerGroupID;
    private String groupName;
    private String telephone;
    private String emailAddress;
    private String contactPerson;
    private String address;
    private Long cropID;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient FarmerGroupDao myDao;

    private List<Farmer> farmerList;

    public FarmerGroup() {
    }

    public FarmerGroup(Long farmerGroupID) {
        this.farmerGroupID = farmerGroupID;
    }

    public FarmerGroup(Long farmerGroupID, String groupName, String telephone, String emailAddress, String contactPerson, String address, Long cropID) {
        this.farmerGroupID = farmerGroupID;
        this.groupName = groupName;
        this.telephone = telephone;
        this.emailAddress = emailAddress;
        this.contactPerson = contactPerson;
        this.address = address;
        this.cropID = cropID;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFarmerGroupDao() : null;
    }

    public Long getFarmerGroupID() {
        return farmerGroupID;
    }

    public void setFarmerGroupID(Long farmerGroupID) {
        this.farmerGroupID = farmerGroupID;
    }

    public String getGroupName() {
        return groupName;
    }

    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }

    public String getTelephone() {
        return telephone;
    }

    public void setTelephone(String telephone) {
        this.telephone = telephone;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    public String getContactPerson() {
        return contactPerson;
    }

    public void setContactPerson(String contactPerson) {
        this.contactPerson = contactPerson;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public Long getCropID() {
        return cropID;
    }

    public void setCropID(Long cropID) {
        this.cropID = cropID;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<Farmer> getFarmerList() {
        if (farmerList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FarmerDao targetDao = daoSession.getFarmerDao();
            List<Farmer> farmerListNew = targetDao._queryFarmerGroup_FarmerList(farmerGroupID);
            synchronized (this) {
                if (farmerList == null) {
                    farmerList = farmerListNew;
                }
            }
        }
        return farmerList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetFarmerList() {
        farmerList = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}

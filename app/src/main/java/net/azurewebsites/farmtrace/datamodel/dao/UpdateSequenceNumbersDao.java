package net.azurewebsites.farmtrace.datamodel.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.azurewebsites.farmtrace.datamodel.dao.UpdateSequenceNumbers;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table UPDATE_SEQUENCE_NUMBERS.
 */
public class UpdateSequenceNumbersDao extends AbstractDao<UpdateSequenceNumbers, Long> {

    public static final String TABLENAME = "UPDATE_SEQUENCE_NUMBERS";

    /**
     * Properties of entity UpdateSequenceNumbers.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UpdateSequenceNumberID = new Property(0, Long.class, "updateSequenceNumberID", true, "UPDATE_SEQUENCE_NUMBER_ID");
        public final static Property UsnDate = new Property(1, java.util.Date.class, "usnDate", false, "USN_DATE");
        public final static Property UserID = new Property(2, Long.class, "userID", false, "USER_ID");
    }

    ;

    private DaoSession daoSession;

    private Query<UpdateSequenceNumbers> user_UpdateSequenceNumbersListQuery;

    public UpdateSequenceNumbersDao(DaoConfig config) {
        super(config);
    }

    public UpdateSequenceNumbersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'UPDATE_SEQUENCE_NUMBERS' (" + //
                "'UPDATE_SEQUENCE_NUMBER_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: updateSequenceNumberID
                "'USN_DATE' INTEGER," + // 1: usnDate
                "'USER_ID' INTEGER);"); // 2: userID
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'UPDATE_SEQUENCE_NUMBERS'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, UpdateSequenceNumbers entity) {
        stmt.clearBindings();

        Long updateSequenceNumberID = entity.getUpdateSequenceNumberID();
        if (updateSequenceNumberID != null) {
            stmt.bindLong(1, updateSequenceNumberID);
        }

        java.util.Date usnDate = entity.getUsnDate();
        if (usnDate != null) {
            stmt.bindLong(2, usnDate.getTime());
        }

        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(3, userID);
        }
    }

    @Override
    protected void attachEntity(UpdateSequenceNumbers entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public UpdateSequenceNumbers readEntity(Cursor cursor, int offset) {
        UpdateSequenceNumbers entity = new UpdateSequenceNumbers( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // updateSequenceNumberID
                cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // usnDate
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // userID
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, UpdateSequenceNumbers entity, int offset) {
        entity.setUpdateSequenceNumberID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsnDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUserID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(UpdateSequenceNumbers entity, long rowId) {
        entity.setUpdateSequenceNumberID(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(UpdateSequenceNumbers entity) {
        if (entity != null) {
            return entity.getUpdateSequenceNumberID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Internal query to resolve the "updateSequenceNumbersList" to-many relationship of User.
     */
    public List<UpdateSequenceNumbers> _queryUser_UpdateSequenceNumbersList(Long userID) {
        synchronized (this) {
            if (user_UpdateSequenceNumbersListQuery == null) {
                QueryBuilder<UpdateSequenceNumbers> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserID.eq(null));
                user_UpdateSequenceNumbersListQuery = queryBuilder.build();
            }
        }
        Query<UpdateSequenceNumbers> query = user_UpdateSequenceNumbersListQuery.forCurrentThread();
        query.setParameter(0, userID);
        return query.list();
    }

}

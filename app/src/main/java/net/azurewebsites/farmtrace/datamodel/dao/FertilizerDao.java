package net.azurewebsites.farmtrace.datamodel.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.azurewebsites.farmtrace.datamodel.dao.Fertilizer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FERTILIZER.
*/
public class FertilizerDao extends AbstractDao<Fertilizer, Long> {

    public static final String TABLENAME = "FERTILIZER";

    /**
     * Properties of entity Fertilizer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FertilizerID = new Property(0, Long.class, "fertilizerID", true, "FERTILIZER_ID");
        public final static Property FertilizerType = new Property(1, String.class, "fertilizerType", false, "FERTILIZER_TYPE");
        public final static Property MainNutrients = new Property(2, String.class, "mainNutrients", false, "MAIN_NUTRIENTS");
        public final static Property SoilConditions = new Property(3, String.class, "soilConditions", false, "SOIL_CONDITIONS");
        public final static Property TimeOfPlanting = new Property(4, Integer.class, "timeOfPlanting", false, "TIME_OF_PLANTING");
        public final static Property TopDressing = new Property(5, Integer.class, "topDressing", false, "TOP_DRESSING");
        public final static Property CropID = new Property(6, Long.class, "cropID", false, "CROP_ID");
    };

    private Query<Fertilizer> crop_FertilizerListQuery;

    public FertilizerDao(DaoConfig config) {
        super(config);
    }
    
    public FertilizerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FERTILIZER' (" + //
                "'FERTILIZER_ID' INTEGER PRIMARY KEY ," + // 0: fertilizerID
                "'FERTILIZER_TYPE' TEXT," + // 1: fertilizerType
                "'MAIN_NUTRIENTS' TEXT," + // 2: mainNutrients
                "'SOIL_CONDITIONS' TEXT," + // 3: soilConditions
                "'TIME_OF_PLANTING' INTEGER," + // 4: timeOfPlanting
                "'TOP_DRESSING' INTEGER," + // 5: topDressing
                "'CROP_ID' INTEGER);"); // 6: cropID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FERTILIZER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Fertilizer entity) {
        stmt.clearBindings();
 
        Long fertilizerID = entity.getFertilizerID();
        if (fertilizerID != null) {
            stmt.bindLong(1, fertilizerID);
        }
 
        String fertilizerType = entity.getFertilizerType();
        if (fertilizerType != null) {
            stmt.bindString(2, fertilizerType);
        }
 
        String mainNutrients = entity.getMainNutrients();
        if (mainNutrients != null) {
            stmt.bindString(3, mainNutrients);
        }
 
        String soilConditions = entity.getSoilConditions();
        if (soilConditions != null) {
            stmt.bindString(4, soilConditions);
        }
 
        Integer timeOfPlanting = entity.getTimeOfPlanting();
        if (timeOfPlanting != null) {
            stmt.bindLong(5, timeOfPlanting);
        }
 
        Integer topDressing = entity.getTopDressing();
        if (topDressing != null) {
            stmt.bindLong(6, topDressing);
        }
 
        Long cropID = entity.getCropID();
        if (cropID != null) {
            stmt.bindLong(7, cropID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Fertilizer readEntity(Cursor cursor, int offset) {
        Fertilizer entity = new Fertilizer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // fertilizerID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fertilizerType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mainNutrients
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // soilConditions
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // timeOfPlanting
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // topDressing
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // cropID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Fertilizer entity, int offset) {
        entity.setFertilizerID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFertilizerType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMainNutrients(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSoilConditions(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeOfPlanting(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTopDressing(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCropID(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Fertilizer entity, long rowId) {
        entity.setFertilizerID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Fertilizer entity) {
        if(entity != null) {
            return entity.getFertilizerID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fertilizerList" to-many relationship of Crop. */
    public List<Fertilizer> _queryCrop_FertilizerList(Long cropID) {
        synchronized (this) {
            if (crop_FertilizerListQuery == null) {
                QueryBuilder<Fertilizer> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CropID.eq(null));
                crop_FertilizerListQuery = queryBuilder.build();
            }
        }
        Query<Fertilizer> query = crop_FertilizerListQuery.forCurrentThread();
        query.setParameter(0, cropID);
        return query.list();
    }

}

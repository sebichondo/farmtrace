package net.azurewebsites.farmtrace.datamodel.dao;

import java.util.List;
import net.azurewebsites.farmtrace.datamodel.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USER.
 */
public class User {

    private Long userID;
    private String userName;
    private String userPassword;
    private Integer userType;
    private Integer userStatus;
    private String profilePicUri;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<PlantingActivity> plantingActivityList;
    private List<UpdateSequenceNumbers> updateSequenceNumbersList;

    public User() {
    }

    public User(Long userID) {
        this.userID = userID;
    }

    public User(Long userID, String userName, String userPassword, Integer userType, Integer userStatus, String profilePicUri) {
        this.userID = userID;
        this.userName = userName;
        this.userPassword = userPassword;
        this.userType = userType;
        this.userStatus = userStatus;
        this.profilePicUri = profilePicUri;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getUserID() {
        return userID;
    }

    public void setUserID(Long userID) {
        this.userID = userID;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getUserPassword() {
        return userPassword;
    }

    public void setUserPassword(String userPassword) {
        this.userPassword = userPassword;
    }

    public Integer getUserType() {
        return userType;
    }

    public void setUserType(Integer userType) {
        this.userType = userType;
    }

    public Integer getUserStatus() {
        return userStatus;
    }

    public void setUserStatus(Integer userStatus) {
        this.userStatus = userStatus;
    }

    public String getProfilePicUri() {
        return profilePicUri;
    }

    public void setProfilePicUri(String profilePicUri) {
        this.profilePicUri = profilePicUri;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PlantingActivity> getPlantingActivityList() {
        if (plantingActivityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlantingActivityDao targetDao = daoSession.getPlantingActivityDao();
            List<PlantingActivity> plantingActivityListNew = targetDao._queryUser_PlantingActivityList(userID);
            synchronized (this) {
                if(plantingActivityList == null) {
                    plantingActivityList = plantingActivityListNew;
                }
            }
        }
        return plantingActivityList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlantingActivityList() {
        plantingActivityList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<UpdateSequenceNumbers> getUpdateSequenceNumbersList() {
        if (updateSequenceNumbersList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UpdateSequenceNumbersDao targetDao = daoSession.getUpdateSequenceNumbersDao();
            List<UpdateSequenceNumbers> updateSequenceNumbersListNew = targetDao._queryUser_UpdateSequenceNumbersList(userID);
            synchronized (this) {
                if(updateSequenceNumbersList == null) {
                    updateSequenceNumbersList = updateSequenceNumbersListNew;
                }
            }
        }
        return updateSequenceNumbersList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetUpdateSequenceNumbersList() {
        updateSequenceNumbersList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

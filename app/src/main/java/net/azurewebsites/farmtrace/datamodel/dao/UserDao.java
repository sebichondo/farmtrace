package net.azurewebsites.farmtrace.datamodel.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.azurewebsites.farmtrace.datamodel.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table USER.
 */
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserID = new Property(0, Long.class, "userID", true, "USER_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property UserPassword = new Property(2, String.class, "userPassword", false, "USER_PASSWORD");
        public final static Property UserType = new Property(3, Integer.class, "userType", false, "USER_TYPE");
        public final static Property UserStatus = new Property(4, Integer.class, "userStatus", false, "USER_STATUS");
        public final static Property ProfilePicUri = new Property(5, String.class, "profilePicUri", false, "PROFILE_PIC_URI");
    }

    ;

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }

    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'USER_ID' INTEGER PRIMARY KEY ," + // 0: userID
                "'USER_NAME' TEXT," + // 1: userName
                "'USER_PASSWORD' TEXT," + // 2: userPassword
                "'USER_TYPE' INTEGER," + // 3: userType
                "'USER_STATUS' INTEGER," + // 4: userStatus
                "'PROFILE_PIC_URI' TEXT);"); // 5: profilePicUri
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();

        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(1, userID);
        }

        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }

        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(3, userPassword);
        }

        Integer userType = entity.getUserType();
        if (userType != null) {
            stmt.bindLong(4, userType);
        }

        Integer userStatus = entity.getUserStatus();
        if (userStatus != null) {
            stmt.bindLong(5, userStatus);
        }

        String profilePicUri = entity.getProfilePicUri();
        if (profilePicUri != null) {
            stmt.bindString(6, profilePicUri);
        }
    }

    @Override
    protected void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userID
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userPassword
                cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // userType
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // userStatus
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // profilePicUri
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUserStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setProfilePicUri(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUserID(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(User entity) {
        if (entity != null) {
            return entity.getUserID();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}

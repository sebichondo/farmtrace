package net.azurewebsites.farmtrace.datamodel.dao;

import java.util.List;

import net.azurewebsites.farmtrace.datamodel.dao.DaoSession;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table FIELD.
 */
public class Field {

    private Long fieldID;
    private String fieldName;
    private String location;
    private Double area;
    private Long farmerID;

    /**
     * Used to resolve relations
     */
    private transient DaoSession daoSession;

    /**
     * Used for active entity operations.
     */
    private transient FieldDao myDao;

    private List<PlantingActivity> plantingActivityList;

    public Field() {
    }

    public Field(Long fieldID) {
        this.fieldID = fieldID;
    }

    public Field(Long fieldID, String fieldName, String location, Double area, Long farmerID) {
        this.fieldID = fieldID;
        this.fieldName = fieldName;
        this.location = location;
        this.area = area;
        this.farmerID = farmerID;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getFieldDao() : null;
    }

    public Long getFieldID() {
        return fieldID;
    }

    public void setFieldID(Long fieldID) {
        this.fieldID = fieldID;
    }

    public String getFieldName() {
        return fieldName;
    }

    public void setFieldName(String fieldName) {
        this.fieldName = fieldName;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public Double getArea() {
        return area;
    }

    public void setArea(Double area) {
        this.area = area;
    }

    public Long getFarmerID() {
        return farmerID;
    }

    public void setFarmerID(Long farmerID) {
        this.farmerID = farmerID;
    }

    /**
     * To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity.
     */
    public List<PlantingActivity> getPlantingActivityList() {
        if (plantingActivityList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlantingActivityDao targetDao = daoSession.getPlantingActivityDao();
            List<PlantingActivity> plantingActivityListNew = targetDao._queryField_PlantingActivityList(fieldID);
            synchronized (this) {
                if (plantingActivityList == null) {
                    plantingActivityList = plantingActivityListNew;
                }
            }
        }
        return plantingActivityList;
    }

    /**
     * Resets a to-many relationship, making the next get call to query for a fresh result.
     */
    public synchronized void resetPlantingActivityList() {
        plantingActivityList = null;
    }

    /**
     * Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context.
     */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context.
     */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context.
     */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

}

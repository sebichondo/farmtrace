package net.azurewebsites.farmtrace.datamodel.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import net.azurewebsites.farmtrace.datamodel.dao.Field;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FIELD.
*/
public class FieldDao extends AbstractDao<Field, Long> {

    public static final String TABLENAME = "FIELD";

    /**
     * Properties of entity Field.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property FieldID = new Property(0, Long.class, "fieldID", true, "FIELD_ID");
        public final static Property FieldName = new Property(1, String.class, "fieldName", false, "FIELD_NAME");
        public final static Property Location = new Property(2, String.class, "location", false, "LOCATION");
        public final static Property FarmerID = new Property(3, Long.class, "farmerID", false, "FARMER_ID");
    };

    private Query<Field> farmer_FieldListQuery;

    public FieldDao(DaoConfig config) {
        super(config);
    }
    
    public FieldDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FIELD' (" + //
                "'FIELD_ID' INTEGER PRIMARY KEY ," + // 0: fieldID
                "'FIELD_NAME' TEXT," + // 1: fieldName
                "'LOCATION' TEXT," + // 2: location
                "'FARMER_ID' INTEGER);"); // 3: farmerID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FIELD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Field entity) {
        stmt.clearBindings();
 
        Long fieldID = entity.getFieldID();
        if (fieldID != null) {
            stmt.bindLong(1, fieldID);
        }
 
        String fieldName = entity.getFieldName();
        if (fieldName != null) {
            stmt.bindString(2, fieldName);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        Long farmerID = entity.getFarmerID();
        if (farmerID != null) {
            stmt.bindLong(4, farmerID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Field readEntity(Cursor cursor, int offset) {
        Field entity = new Field( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // fieldID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fieldName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // location
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // farmerID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Field entity, int offset) {
        entity.setFieldID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFieldName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFarmerID(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Field entity, long rowId) {
        entity.setFieldID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Field entity) {
        if(entity != null) {
            return entity.getFieldID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fieldList" to-many relationship of Farmer. */
    public List<Field> _queryFarmer_FieldList(Long farmerID) {
        synchronized (this) {
            if (farmer_FieldListQuery == null) {
                QueryBuilder<Field> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.FarmerID.eq(null));
                farmer_FieldListQuery = queryBuilder.build();
            }
        }
        Query<Field> query = farmer_FieldListQuery.forCurrentThread();
        query.setParameter(0, farmerID);
        return query.list();
    }

}
